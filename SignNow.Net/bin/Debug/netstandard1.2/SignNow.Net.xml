<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SignNow.Net</name>
    </assembly>
    <members>
        <member name="P:SignNow.Net.Exceptions.ExceptionMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SignNow.Net.Exceptions.ExceptionMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SignNow.Net.Exceptions.ExceptionMessages.RequestUrlIsNull">
            <summary>
              Looks up a localized string similar to RequestUrl cannot be empty or null.
            </summary>
        </member>
        <member name="P:SignNow.Net.Exceptions.ExceptionMessages.CannotAddRole">
            <summary>
              Looks up a localized string similar to Cannot assign role to user.
            </summary>
        </member>
        <member name="P:SignNow.Net.Exceptions.ExceptionMessages.NoFillableFieldsWithRole">
            <summary>
              Looks up a localized string similar to Document must have fillable fields.
            </summary>
        </member>
        <member name="P:SignNow.Net.Exceptions.ExceptionMessages.InvalidFormatOfId">
            <summary>
              Looks up a localized string similar to Invalid format of ID.
            </summary>
        </member>
        <member name="P:SignNow.Net.Exceptions.ExceptionMessages.InvalidFormatOfEmail">
            <summary>
              Looks up a localized string similar to Invalid format of email.
            </summary>
        </member>
        <member name="P:SignNow.Net.Exceptions.ExceptionMessages.UnexpectedValueWhenConverting">
            <summary>
              Looks up a localized string similar to: Unexpected value when converting to `{0}`. Expected {1}, got {2}.
            </summary>
        </member>
        <member name="P:SignNow.Net.Exceptions.ExceptionMessages.UnableToProcessRequest">
            <summary>
            Unable to process request {HttpMethod}:{RequestUrl}, Time taken: {requestTime}s
            </summary>
        </member>
        <member name="P:SignNow.Net.Exceptions.ExceptionMessages.InvalidJsonSyntax">
            <summary>
            Invalid Json syntax in response
            </summary>
        </member>
        <member name="P:SignNow.Net.Exceptions.ExceptionMessages.DocumentDoesNotHaveRoles">
            <summary>
            This document does not contain Roles.
            </summary>
        </member>
        <member name="P:SignNow.Net.Exceptions.ExceptionMessages.InviteIsAlreadyExistsForDocument">
            <summary>
            An invite already exists for this document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Exceptions.ExceptionMessages.AllowedRangeMustBeFrom15to45">
            <summary>
            Allowed range must be from 15 to 45 minutes
            </summary>
        </member>
        <member name="P:SignNow.Net.Exceptions.ExceptionMessages.StringNotNullOrEmptyOrWhitespace">
            <summary>
            String cannot be null, empty or whitespace
            </summary>
        </member>
        <member name="P:SignNow.Net.Exceptions.SignNowException.RawResponse">
            <summary>
            Contains all the details of original Json response from SignNow API
            </summary>
        </member>
        <member name="M:SignNow.Net.Exceptions.SignNowException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SignNow.Net.Exceptions.SignNowException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
        </member>
        <member name="M:SignNow.Net.Exceptions.SignNowException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SignNow.Net.Exceptions.SignNowException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified. </param>
        </member>
        <member name="M:SignNow.Net.Exceptions.SignNowException.#ctor(System.String,System.Collections.Generic.IEnumerable{SignNow.Net.Exceptions.SignNowException})">
            <summary>
            Initializes a new instance of the <see cref="T:SignNow.Net.Exceptions.SignNowException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerExceptions">The exceptions that are the cause of the current exception.</param>
        </member>
        <member name="M:SignNow.Net.Exceptions.SignNowException.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of the <see cref="T:SignNow.Net.Exceptions.SignNowException" /> class
            with a specified error message and response status code.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="httpStatusCode">Http status code related to exception</param>
        </member>
        <member name="T:SignNow.Net.Interfaces.IContent">
            <summary>
            Interface that represent <see cref="T:System.Net.Http.HttpContent"/> for <see cref="T:SignNow.Net.Model.RequestOptions"/>
            </summary>
        </member>
        <member name="T:SignNow.Net.Interfaces.IDocumentService">
            <summary>
            Interface for any operations with a Document in SignNow
            can be used to create, download, retrieve, delete a document etc.
            </summary>
        </member>
        <member name="M:SignNow.Net.Interfaces.IDocumentService.UpdateDocumentSmartFields(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Update Document Smart Fields.
            </summary>
            <param name="documentId">Identity of the document to have smart fields updated.</param>
            <param name="smartData">Array of smart field name with value for example [{"field1": "value"}]</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If document identity is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Interfaces.IDocumentService.GetDocumentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a document detailed data.
            </summary>
            <param name="documentId">Identity of the document to be viewed.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If document identity is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Interfaces.IDocumentService.GetDocumentAsyncResponse(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a document detailed data.
            </summary>
            <param name="documentId">Identity of the document to be viewed.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If document identity is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Interfaces.IDocumentService.GetNewDocumentIdFromTemplateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a document id and name.
            </summary>
            <param name="templateId">Identity of the template to be copied from.</param>
            <param name="newDocumentName">Name for the new document.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If document identity is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Interfaces.IDocumentService.UploadDocumentAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <summary>
            Uploads a file to the SignNow account and creates a document.
            This method accepts .doc, .docx, .pdf, and .png file types.
            </summary>
            <param name="documentContent">Document content stream</param>
            <param name="fileName">Uploaded document file name</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>Operation result object containing ID of the new document.</returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.IDocumentService.UploadDocumentWithFieldExtractAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <summary>
            Uploads a file to the SignNow account, creates a document and extracts simple field tags if any.
            This method accepts .doc, .docx and .pdf file types.
            </summary>
            <param name="documentContent">Document content stream</param>
            <param name="fileName">Uploaded document file name</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>Operation result object containing ID of the new document.</returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.IDocumentService.DeleteDocumentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes a document from SignNow account.
            </summary>
            <param name="documentId">Identity of the document to be removed.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If document identity is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Interfaces.IDocumentService.CreateSigningLinkAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates URL to sign the document containing fillable fields using web browser.
            </summary>
            <param name="documentId">Identity of the document to create signing link for</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns>Operation result object containing URL to sign the document using web browser.</returns>
            <exception cref="T:System.ArgumentException">If document identity is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Interfaces.IDocumentService.DownloadDocumentAsync(System.String,SignNow.Net.Model.DownloadType,System.Threading.CancellationToken)">
            <summary>
            Downloads a Collapsed/Zipped Document.
            </summary>
            <param name="documentId">Identity of the document to create signing link for</param>
            <param name="type">Download document <see cref="T:SignNow.Net.Model.DownloadType">type</see></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns>Operation result object containing File info with Stream file content.</returns>
            <exception cref="T:System.ArgumentException">If document identity is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Interfaces.IDocumentService.MergeDocumentsAsync(System.String,System.Collections.Generic.IEnumerable{SignNow.Net.Model.SignNowDocument},System.Threading.CancellationToken)">
            <summary>
            Merges two or more documents into one.
            </summary>
            <param name="documentName">The name of the document with extension that will be created and written to</param>
            <param name="documents">Collection of the <see cref="T:SignNow.Net.Model.SignNowDocument">documents</see></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns>Operation result object containing File info with Stream file content.</returns>
            <exception cref="T:System.ArgumentException">If document identity is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Interfaces.IDocumentService.GetDocumentHistoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves a document history (action log) data
            </summary>
            <param name="documentId">Identity of the document to retrieve history list</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns>List of Document history items</returns>
            <exception cref="T:System.ArgumentException">If document identity is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Interfaces.IDocumentService.CreateOneTimeDownloadLinkAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Create a one-time use URL for anyone to download the document as a PDF.
            </summary>
            <param name="documentId">Identity of the document to be downloaded with one-time link</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns>link to download specified document in PDF format</returns>
            <exception cref="T:System.ArgumentException">If document identity is not valid.</exception>
        </member>
        <member name="T:SignNow.Net.Interfaces.IFolderService">
            <summary>
            Interface for any operations with a folders in SignNow
            </summary>
            <remarks>
            Folders serve for storing user's documents. <br />
            By default, there are three folders in every account:
            <list type="bullet">
            <item><description>Documents</description></item>
            <item><description>Templates</description></item>
            <item><description>Archive</description></item>
            </list>
            Subfolders can be created only for these three and their child folders.
            </remarks>
        </member>
        <member name="M:SignNow.Net.Interfaces.IFolderService.GetAllFoldersAsync(System.Threading.CancellationToken)">
            <summary>
            Returns all folders of a <see cref="T:SignNow.Net.Model.User"/>.
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.IFolderService.GetFolderAsync(System.String,SignNow.Net.Model.Requests.GetFolderOptions,System.Threading.CancellationToken)">
            <summary>
            Returns all details of a specific folder including all documents in that folder.
            </summary>
            <param name="folderId">ID of the folder to get details of</param>
            <param name="options">Folder filter and sort options</param>
            <param name="cancellation">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.IFolderService.CreateFolderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a folder for the user.
            </summary>
            <param name="name">Name of a new folder</param>
            <param name="parentId">Identifier for the parent folder that contains this folder.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>Returns ID of a new folder.</returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.IFolderService.DeleteFolderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a folder.
            </summary>
            <param name="folderId">ID of the folder to delete.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.IFolderService.RenameFolderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Renames a folder.
            </summary>
            <param name="name">A new folder's name.</param>
            <param name="folderId">ID of the folder to rename.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>Returns ID of the renamed folder.</returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.IHttpContentAdapter`1.Adapt(System.Net.Http.HttpContent)">
            <summary>
            Converts HTTP content to <typeparamref name="TResult"/>.
            </summary>
            <param name="content">Http response content</param>
        </member>
        <member name="T:SignNow.Net.Interfaces.IOAuth2Service">
            <summary>
            Interface for Authenticated requests.
            </summary>
        </member>
        <member name="M:SignNow.Net.Interfaces.IOAuth2Service.GetAuthorizationUrl(System.Uri)">
            <summary>
            Returns authorization URI for OAuth2 flow
            </summary>
            <param name="redirectUrl"></param>
            <returns><see cref="T:System.Uri" /></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="redirectUrl" /> argument is a null.</exception>
        </member>
        <member name="M:SignNow.Net.Interfaces.IOAuth2Service.GetTokenAsync(System.String,System.String,SignNow.Net.Model.Scope,System.Threading.CancellationToken)">
            <summary>
            Retrieve Access token by user's login and password
            </summary>
            <param name="login">User's login</param>
            <param name="password">User's password</param>
            <param name="scope">Specify a <see cref="T:SignNow.Net.Model.Scope" /> for token request</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns><see cref="T:SignNow.Net.Model.Token" /> object</returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.IOAuth2Service.GetTokenAsync(System.String,SignNow.Net.Model.Scope,System.Threading.CancellationToken)">
            <summary>
            Retrieve Access token by authorization code
            </summary>
            <param name="code">Authorization code</param>
            <param name="scope">Specify a <see cref="T:SignNow.Net.Model.Scope" /> for token request</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns><see cref="T:SignNow.Net.Model.Token" /> object</returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.IOAuth2Service.RefreshTokenAsync(SignNow.Net.Model.Token,System.Threading.CancellationToken)">
            <summary>
            Retrieve Access token by User's refresh token
            </summary>
            <param name="token">User's access <see cref="T:SignNow.Net.Model.Token" /></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns><see cref="T:SignNow.Net.Model.Token" /> object</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="token"/> argument is a null.</exception>
        </member>
        <member name="M:SignNow.Net.Interfaces.IOAuth2Service.ValidateTokenAsync(SignNow.Net.Model.Token,System.Threading.CancellationToken)">
            <summary>
            Verify an access token for a user
            </summary>
            <param name="token">User's access <see cref="T:SignNow.Net.Model.Token" /></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns>true if token is valid</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="token"/> argument is a null.</exception>
        </member>
        <member name="T:SignNow.Net.Interfaces.ISignInvite">
            <summary>
            Interface for any operations with an Invite in SignNow:
            creating or canceling the invite to sign a document, checking status of the invite, etc.
            </summary>
        </member>
        <member name="M:SignNow.Net.Interfaces.ISignInvite.CreateInviteAsync(System.String,SignNow.Net.Model.SignInvite,System.Threading.CancellationToken)">
            <summary>
            Create an invite to sign a document.
            </summary>
            <param name="documentId">Identity of the document to create signing invite for.</param>
            <param name="invite">A simple free form invite or a role-based invite.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.ISignInvite.CreateInviteAsync(System.String,SignNow.Net.Model.EmbeddedSigningInvite,System.Threading.CancellationToken)">
            <summary>
            Creates embedded signing invites for a document without sending emails.
            </summary>
            <param name="documentId">Identity of the document to create signing invite for.</param>
            <param name="invite">An embedded signing invites options for each document role.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.ISignInvite.GenerateEmbeddedInviteLinkAsync(System.String,SignNow.Net.Model.Requests.CreateEmbedLinkOptions,System.Threading.CancellationToken)">
            <summary>
            Creates a link for the embedded invite.
            </summary>
            <param name="documentId">Identity of the document to create signing link invite for.</param>
            <param name="options">Embedded invite link create options.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.ISignInvite.CancelInviteAsync(SignNow.Net.Model.FreeformInvite,System.Threading.CancellationToken)">
            <summary>
            Cancels a freeform invite sign request.
            </summary>
            <param name="invite"><see cref="T:SignNow.Net.Model.FreeformInvite"/> to cancel signing invite for.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.ISignInvite.CancelInviteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels a field invite (role-based invite) to a document.
            </summary>
            <param name="documentId">The Document identity to cancel an fields invitation.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.ISignInvite.CancelEmbeddedInviteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancels an embedded sign invite to a document.
            </summary>
            <param name="documentId">The Document identity to cancel an embedded invitation.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.ISignNowClient.RequestAsync``1(SignNow.Net.Model.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            HTTP requests are being made here
            </summary>
            <typeparam name="TResponse">Type (Model) of the response from the request</typeparam>
            <param name="requestOptions"><see cref="T:SignNow.Net.Model.RequestOptions"/></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.ISignNowClient.RequestAsync``1(SignNow.Net.Model.RequestOptions,SignNow.Net.Interfaces.IHttpContentAdapter{``0},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.ISignNowClient.RequestAsync``1(SignNow.Net.Model.RequestOptions,System.Threading.CancellationToken)"/>
            <typeparam name="TResponse">Type (Model) of the response from the request</typeparam>
            <param name="requestOptions"><see cref="T:SignNow.Net.Model.RequestOptions"/></param>
            <param name="adapter"><see cref="T:SignNow.Net.Interfaces.IHttpContentAdapter`1"/></param>
            <param name="completionOption"><see cref="T:System.Net.Http.HttpCompletionOption"/></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.ISignNowClient.RequestAsync(SignNow.Net.Model.RequestOptions,System.Threading.CancellationToken)">
            <summary>
            HTTP requests which returns Stream response
            </summary>
            <param name="requestOptions"><see cref="T:SignNow.Net.Model.RequestOptions"/></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns><see cref="T:System.IO.Stream"/> response.</returns>
        </member>
        <member name="T:SignNow.Net.Interfaces.ISignNowContent">
            <summary>
            Interface for all SignNow content types retrieval.
            Resources that implement this interface can be used as SignNow Content (Field Content).
            <para>Possible concrete classes:</para>
            <list type="bullet">
            <item><description><see cref="T:SignNow.Net.Model.FieldContents.AttachmentContent" /></description></item>
            <item><description><see cref="T:SignNow.Net.Model.FieldContents.CheckboxContent" /></description></item>
            <item><description><see cref="T:SignNow.Net.Model.FieldContents.HyperlinkContent" /></description></item>
            <item><description><see cref="T:SignNow.Net.Model.FieldContents.RadiobuttonContent" /></description></item>
            <item><description><see cref="T:SignNow.Net.Model.FieldContents.SignatureContent" /></description></item>
            <item><description><see cref="T:SignNow.Net.Model.FieldContents.TextContent" /></description></item>
            </list>
            </summary>
        </member>
        <member name="M:SignNow.Net.Interfaces.ISignNowContent.GetValue">
            <summary>
            Returns the value for any of SignNow content object.
            </summary>
        </member>
        <member name="T:SignNow.Net.Interfaces.ISignNowContext">
            <summary>
            Interface that manages other SignNow interfaces: IDocumentService, IUserService, ISignInvite, IFolderService.
            <para>It contains:</para>
            <list type="bullet">
            <item>
                <description><see cref="T:SignNow.Net.Interfaces.IDocumentService"/> interface for any operations with a Document in SignNow;
                    can be used to create, download, retrieve, delete a document etc.</description>
            </item>
            <item>
                <description><see cref="T:SignNow.Net.Interfaces.IUserService"/> interface for any operations with a User in SignNow;
                    i.e. create a user, authenticate a user, retrieve user's documents etc.</description>
            </item>
            <item>
                <description><see cref="T:SignNow.Net.Interfaces.ISignInvite"/> interface for any operations with an Invite in SignNow:
                    creating or canceling the invite to sign a document, checking status of the invite, etc.</description>
            </item>
            <item>
                <description><see cref="T:SignNow.Net.Interfaces.IFolderService"/> interface for any operations with a Folders in SignNow:
                    can be used to create, view, rename or delete a folders.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="P:SignNow.Net.Interfaces.ISignNowContext.Documents">
            <inheritdoc cref="T:SignNow.Net.Interfaces.IDocumentService"/>
        </member>
        <member name="P:SignNow.Net.Interfaces.ISignNowContext.Users">
            <inheritdoc cref="T:SignNow.Net.Interfaces.IUserService"/>
        </member>
        <member name="P:SignNow.Net.Interfaces.ISignNowContext.Invites">
            <inheritdoc cref="T:SignNow.Net.Interfaces.ISignInvite"/>
        </member>
        <member name="P:SignNow.Net.Interfaces.ISignNowContext.Folders">
            <inheritdoc cref="T:SignNow.Net.Interfaces.IFolderService"/>
        </member>
        <member name="T:SignNow.Net.Interfaces.ISignNowField">
            <summary>
            Interface for all SignNow Fields.
            </summary>
        </member>
        <member name="P:SignNow.Net.Interfaces.ISignNowField.Type">
            <summary>
            Get SignNow field type.
            </summary>
        </member>
        <member name="P:SignNow.Net.Interfaces.ISignNowField.ElementId">
            <summary>
            Returns identity for element with content.
            </summary>
        </member>
        <member name="P:SignNow.Net.Interfaces.ISignNowInviteStatus.Id">
            <summary>
            Unique identifier of invite.
            </summary>
        </member>
        <member name="P:SignNow.Net.Interfaces.ISignNowInviteStatus.SignerEmail">
            <summary>
            Signer email.
            </summary>
        </member>
        <member name="P:SignNow.Net.Interfaces.ISignNowInviteStatus.Status">
            <summary>
            Status of the invite sign request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Interfaces.ISignNowInviteStatus.Created">
            <summary>
            Timestamp invite was created.
            </summary>
        </member>
        <member name="T:SignNow.Net.Interfaces.IUserService">
            <summary>
            Interface for any operations with a User in SignNow;
            i.e. create a user, authenticate a user, retrieve user's documents etc.
            </summary>
        </member>
        <member name="M:SignNow.Net.Interfaces.IUserService.CreateUserAsync(SignNow.Net.Model.Requests.CreateUserOptions,System.Threading.CancellationToken)">
            <summary>
            Creates an account for a user
            </summary>
            <param name="createUser">User personal data (firstname, lastname, email, password)</param>
            <param name="cancellation">Propagates notification that operations should be canceled</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.IUserService.GetCurrentUserAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve current user`s resource
            </summary>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.IUserService.UpdateUserAsync(SignNow.Net.Model.Requests.UpdateUserOptions,System.Threading.CancellationToken)">
            <summary>
            Updates user information i.e. first name, last name
            </summary>
            <param name="updateUser">User personal data (firstname, lastname, password)</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.IUserService.SendVerificationEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends verification email to a user
            </summary>
            <param name="email">User email</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.IUserService.SendPasswordResetLinkAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends password reset link
            </summary>
            <param name="email">User email</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.IUserService.GetModifiedDocumentsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns an enumerable of user's documents that have been modified
            (added fields, texts, signatures, etc.) in descending order by modified date
            </summary>
            <param name="perPage">How many document objects to display per page in response. By default, it's 15, maximum 100.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Interfaces.IUserService.GetUserDocumentsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns an enumerable of user's documents that that have not been modified yet.
            </summary>
            <param name="perPage">How many document objects to display per page in response. By default, it's 15, maximum 100.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="P:SignNow.Net.Model.Company.Name">
            <summary>
            Company name.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Company.FullAccess">
            <summary>
            User have full access to Company when it belongs to Company domain.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.DownloadType">
            <summary>
            Possible types for document downloads
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.DownloadType.PdfOriginal">
            <summary>
            Raw data of the PDF document that can be written to a blank `.pdf` file.
            This file - is original PDF uploaded by user.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.DownloadType.PdfCollapsed">
            <summary>
            Raw data of the PDF document that can be written to a blank `.pdf` file.
            This file - is PDF document with filled fields.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.DownloadType.ZipCollapsed">
            <summary>
            Raw data of a ZIP file containing the PDF and any attachments
            on that document that can be written to blank a `.zip` file.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.DownloadType.PdfWithHistory">
            <summary>
            Raw data of the PDF collapsed document with a table containing the document's history.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.EmbeddedInvite">
            <summary>
            Represent Embedded signing invite params.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.EmbeddedInvite.Email">
            <summary>
            Signer's email address.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.EmbeddedInvite.RoleId">
            <summary>
            Signer's role ID.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.EmbeddedInvite.SigningOrder">
            <summary>
            Order of signing. Cannot be 0.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.EmbeddedInvite.AuthMethod">
            <summary>
            Signer authentication method.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.Field">
            <summary>
            SignNow fields metadata.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Field.Id">
            <summary>
            Unique identifier of field.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Field.Type">
            <summary>
            Field type.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Field.RoleId">
            <summary>
            <see cref="T:SignNow.Net.Model.Role"/> identity.
            </summary>
            TODO: Use Role model instead of RoleId + RoleName
        </member>
        <member name="P:SignNow.Net.Model.Field.RoleName">
            <summary>
            Signer role name.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Field.JsonAttributes">
            <summary>
            Field attributes: name, label, x/y coordinates, width, height...
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Field.Owner">
            <summary>
            Document owner email.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Field.Signer">
            <summary>
            Signer email.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Field.ElementId">
            <summary>
            Identity of specific element for corresponding field type.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Field.RadioGroup">
            <summary>
            Radio group elements initial state for Radiobuttons field type.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.FieldType">
            <summary>
            Represents all types of SignNow fields.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.FieldType.Text">
            <summary>
            Text box, Dropdown box, Data-Time picker.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.FieldType.Signature">
            <summary>
            Signature fields.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.FieldType.Initials">
            <summary>
            Initials fields.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.FieldType.Checkbox">
            <summary>
            Check box.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.FieldType.Enumeration">
            <summary>
            Enumeration list.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.FieldType.RadioButton">
            <summary>
            Radio button group with Radio elements included.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.FieldType.Attachment">
            <summary>
            Document's attachment which can be downloaded by URL.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.FieldType.Hyperlink">
            <summary>
            Hyperlink field with Url and label.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.FieldContents.AttachmentContent">
            <summary>
            Represents SignNow field types: `Attachment`
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.AttachmentContent.OriginalName">
            <summary>
            Original attachment file name with extension.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.AttachmentContent.FileName">
            <summary>
            Filename with extension used in SignNow.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.AttachmentContent.FileSize">
            <summary>
            File size in bytes.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.FieldContents.AttachmentContent.GetValue">
            <inheritdoc />
        </member>
        <member name="T:SignNow.Net.Model.FieldContents.BaseContent">
            <summary>
            Basic SignNow field content.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.BaseContent.Id">
            <summary>
            Identity of field.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.BaseContent.UserId">
            <summary>
            Identity of User which fulfilled the field.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.BaseContent.PageNumber">
            <summary>
            The page number of the document.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.FieldContents.BaseContent.GetValue">
            <inheritdoc />
        </member>
        <member name="T:SignNow.Net.Model.FieldContents.CheckboxContent">
            <summary>
            Represents SignNow field types: `Checkbox`
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.CheckboxContent.Email">
            <summary>
            Email of user who fulfilled the field.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.CheckboxContent.Data">
            <summary>
            Checkbox value (checked or unchecked).
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.FieldContents.CheckboxContent.ToString">
            <summary>
            Returns text value of <see cref="P:SignNow.Net.Model.FieldContents.CheckboxContent.Data"/> field.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.FieldContents.CheckboxContent.GetValue">
            <inheritdoc />
        </member>
        <member name="T:SignNow.Net.Model.FieldContents.EnumerationContent">
            <summary>
            Represents an element of Enumeration options
            for `Dropdown` field type.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.EnumerationContent.Id">
            <summary>
            Unique identifier of field.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.EnumerationContent.EnumerationId">
            <summary>
            Unique identifier of enumeration element.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.EnumerationContent.Data">
            <summary>
            Enumeration value.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.EnumerationContent.Created">
            <summary>
            Timestamp enumeration was created.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.EnumerationContent.Updated">
            <summary>
            Timestamp enumeration was updated.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.FieldContents.EnumerationContent.GetValue">
            <inheritdoc />
        </member>
        <member name="T:SignNow.Net.Model.FieldContents.HyperlinkContent">
            <summary>
            Represents SignNow field types: `Hyperlink`
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.HyperlinkContent.Email">
            <summary>
            Email of user who fulfilled the field.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.HyperlinkContent.Label">
            <summary>
            Hyperlink label.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.HyperlinkContent.Data">
            <summary>
            Hyperlink field value <see cref="T:System.Uri"/>
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.FieldContents.HyperlinkContent.ToString">
            <summary>
            Returns Hyperlink content as <see cref="T:System.Uri"/> string.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.FieldContents.HyperlinkContent.GetValue">
            <inheritdoc />
        </member>
        <member name="T:SignNow.Net.Model.FieldContents.RadiobuttonContent">
            <summary>
            Represents SignNow field types: `Radiobutton`
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.RadiobuttonContent.Name">
            <summary>
            Radiobutton name.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.RadiobuttonContent.Created">
            <summary>
            Timestamp radiobutton was created.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.RadiobuttonContent.X">
            <summary>
            X coordinate (in pixels) of radiobutton field.
            <para>Coordinate starts from top left corner of the document Mediabox</para>
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.RadiobuttonContent.Y">
            <summary>
            Y coordinate (in pixels) of radiobutton field.
            <para>Coordinate starts from top left corner of the document Mediabox</para>
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.RadiobuttonContent.Radio">
            <summary>
            List of Radio elements.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.RadiobuttonContent.Data">
            <summary>
            Returns Radiobutton content (actual state) as string.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.FieldContents.RadiobuttonContent.ToString">
            <summary>
            Returns Radiobutton content (actual state) as string.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.FieldContents.RadiobuttonContent.GetValue">
            <inheritdoc />
        </member>
        <member name="T:SignNow.Net.Model.FieldContents.RadioContent">
            <summary>
            Represents SignNow element for field types: `Radiobutton`
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.RadioContent.Id">
            <summary>
            Identity of Radio field.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.RadioContent.PageNumber">
            <summary>
            The page number of the document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.RadioContent.X">
            <summary>
            X coordinate (in pixels) of radio field.
            <para>Coordinate starts from top left corner of the document Mediabox</para>
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.RadioContent.Y">
            <summary>
            Y coordinate (in pixels) of radio field.
            <para>Coordinate starts from top left corner of the document Mediabox</para>
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.RadioContent.Width">
            <summary>
            Width (in pixels) of radio field.
            <para>Starts from top left corner of the element frame.</para>
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.RadioContent.Height">
            <summary>
            Height (in pixels) of radio field.
            <para>Starts from top left corner of the element frame.</para>
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.RadioContent.Created">
            <summary>
            Timestamp radio element was created.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.RadioContent.Checked">
            <summary>
            State of radio element (checked or not).
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.RadioContent.Data">
            <summary>
            The radio element value.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.FieldContents.RadioContent.GetValue">
            <inheritdoc />
        </member>
        <member name="T:SignNow.Net.Model.FieldContents.SignatureContent">
            <summary>
            Represents SignNow field types: `Signature`, `Initials fields`.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.SignatureContent.SignatureRequestId">
            <summary>
            Identity of the signature request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.SignatureContent.Email">
            <summary>
            <see cref="T:SignNow.Net.Model.User"/> email who was signed the document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.SignatureContent.Created">
            <summary>
            Timestamp document was signed.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.SignatureContent.Data">
            <summary>
            Raw text value of the field.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.FieldContents.SignatureContent.ToString">
            <summary>
            Returns SignatureContent content as base64 string.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.FieldContents.SignatureContent.GetValue">
            <inheritdoc />
        </member>
        <member name="T:SignNow.Net.Model.FieldContents.TextContent">
            <summary>
            Represents SignNow field types: `Text box`, `Dropdown box`, `Date-Time picker`
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.TextContent.Email">
            <summary>
            Email of user who fulfilled the field.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldContents.TextContent.Data">
            <summary>
            Raw text value of the field.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.FieldContents.TextContent.ToString">
            <summary>
            Returns text value of <see cref="P:SignNow.Net.Model.FieldContents.TextContent.Data"/> field.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.FieldContents.TextContent.GetValue">
            <inheritdoc />
        </member>
        <member name="P:SignNow.Net.Model.Requests.CreateEmbedLinkOptions.AuthMethod">
            <summary>
            Signer authentication method.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.CreateEmbedLinkOptions.LinkExpiration">
            <summary>
            In how many minutes the link expires, ranges from 15 to 45 minutes or null.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.CreateEmbedLinkOptions.FieldInvite">
            <summary>
            Signature invite you'd like to embed.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.CreateUserOptions.Email">
            <summary>
            User email.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.CreateUserOptions.Password">
            <summary>
            User password.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.CreateUserOptions.FirstName">
            <summary>
            User firstname.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.CreateUserOptions.LastName">
            <summary>
            User lastname.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.GetFolderOptions.Limit">
            <summary>
            Displays specified number of documents;
            Min limit is 0 (no documents will be shown), Max limit is 100.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.GetFolderOptions.Offset">
            <summary>
            Displays documents from specified position.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.GetFolderOptions.EntityTypes">
            <summary>
            Displays documents by entity type
            </summary>
            <remarks>
            <see cref="F:SignNow.Net.Model.Requests.GetFolderQuery.EntityType.All"/> - show document list with active documents and document groups.<br/>
            <see cref="F:SignNow.Net.Model.Requests.GetFolderQuery.EntityType.Document"/> - show standard document list.<br/>
            <see cref="F:SignNow.Net.Model.Requests.GetFolderQuery.EntityType.DocumentGroup"/> - show only document groups.
            </remarks>
        </member>
        <member name="P:SignNow.Net.Model.Requests.GetFolderOptions.SubfolderData">
            <summary>
            Allows to returns information about all system folders and their sub-folders without documents
            <remarks>
            Values: <see cref="F:SignNow.Net.Model.Requests.GetFolderQuery.SubFolders.Show"/> - yes, displayed, <see cref="F:SignNow.Net.Model.Requests.GetFolderQuery.SubFolders.DoNotShow"/> - no, don't show.
            </remarks>
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.GetFolderOptions.WithTeamDocuments">
            <summary>
            Allows to display "Team Documents" folders. Allowed values: true, false.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SignNow.Net.Model.Requests.GetFolderOptions.IncludeDocumentsSubfolder">
            <summary>
            Allows to hide subfolders and display all documents from those subfolders in the parent folder.
            Parameter works only for "Documents" and "Template" folder and their children.
            Default value: true
            </summary>
            <returns></returns>
        </member>
        <member name="P:SignNow.Net.Model.Requests.GetFolderOptions.ExcludeDocumentsRelations">
            <summary>
            Allows to display short list of document info and increases maximum limit from 100 to 500 documents per page.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.Requests.GetFolderOptions.ToQueryString">
            <summary>
            Converts <see cref="T:SignNow.Net.Model.Requests.GetFolderQuery.FolderFilters"/> to query sting
            </summary>
            <returns></returns>
        </member>
        <member name="T:SignNow.Net.Model.Requests.GetFolderQuery.FolderFilters">
            <summary>
            Filter options to show the documents in the specific folder with the specific status
            or created/updated starting from a specific date.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.GetFolderQuery.FolderFilters.Status">
            <summary>
            Documents signing status to filter.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.GetFolderQuery.FolderFilters.FieldsAndRoles">
            <summary>
            Allows filtering docs that do not contain fields and roles
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.GetFolderQuery.FolderFilters.Updated">
            <summary>
            Timestamp document was updated.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.GetFolderQuery.FolderFilters.Created">
            <summary>
            Timestamp document was created.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.Requests.GetFolderQuery.FolderFilters.#ctor(SignNow.Net.Model.Requests.GetFolderQuery.SigningStatus)">
            <summary>
            Construct <see cref="T:SignNow.Net.Model.Requests.GetFolderQuery.FolderFilters"/> with signing status.
            </summary>
            <param name="status">Specific status for filtering.</param>
        </member>
        <member name="M:SignNow.Net.Model.Requests.GetFolderQuery.FolderFilters.#ctor(SignNow.Net.Model.Requests.GetFolderQuery.HasFieldsAndRoles)">
            <summary>
            Construct <see cref="T:SignNow.Net.Model.Requests.GetFolderQuery.FolderFilters"/> with fields and roles filter.
            </summary>
            <param name="option">Options to set filtering docs that do not contain fields and roles.</param>
        </member>
        <member name="M:SignNow.Net.Model.Requests.GetFolderQuery.FolderFilters.#ctor(SignNow.Net.Model.Requests.GetFolderQuery.DocumentCreatedFilter)">
            <summary>
            Construct <see cref="T:SignNow.Net.Model.Requests.GetFolderQuery.FolderFilters"/> with document created filter.
            </summary>
            <param name="documentCreatedFilter">Specific time point to filter documents that were created starting from a specific date.</param>
        </member>
        <member name="M:SignNow.Net.Model.Requests.GetFolderQuery.FolderFilters.#ctor(SignNow.Net.Model.Requests.GetFolderQuery.DocumentUpdatedFilter)">
            <summary>
            Construct <see cref="T:SignNow.Net.Model.Requests.GetFolderQuery.FolderFilters"/> with document updated filter.
            </summary>
            <param name="documentUpdatedFilter">Specific time point to filter documents that were updated starting from a specific date.</param>
        </member>
        <member name="T:SignNow.Net.Model.Requests.GetFolderQuery.DocumentCreatedFilter">
            <summary>
            Filter documents that were created starting from a specific date.
            </summary>
            <remarks>This filter is not applicable for Templates</remarks>
        </member>
        <member name="T:SignNow.Net.Model.Requests.GetFolderQuery.DocumentUpdatedFilter">
            <summary>
            Filter documents that were updated starting from a specific date.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.Requests.GetFolderQuery.SigningStatus">
            <summary>
            Document signing statuses.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.Requests.GetFolderQuery.HasFieldsAndRoles.No">
            <summary>Documents with no fields and roles</summary>
        </member>
        <member name="F:SignNow.Net.Model.Requests.GetFolderQuery.HasFieldsAndRoles.Yes">
            <summary>Documents with fields and roles</summary>
        </member>
        <member name="T:SignNow.Net.Model.Requests.GetFolderQuery.FolderSort">
            <summary>
            Sorts documents by creation or update date in descending or ascending order.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.Requests.GetFolderQuery.FolderSort.#ctor(SignNow.Net.Model.Requests.GetFolderQuery.SortByParam,SignNow.Net.Model.Requests.GetFolderQuery.SortOrder)">
            <summary>
            Construct Folder sort object.
            </summary>
            <param name="sortBy">Sort documents by <see cref="F:SignNow.Net.Model.Requests.GetFolderQuery.SortByParam.Created"/>, <see cref="F:SignNow.Net.Model.Requests.GetFolderQuery.SortByParam.Updated"/> date or by <see cref="F:SignNow.Net.Model.Requests.GetFolderQuery.SortByParam.DocumentName"/>.</param>
            <param name="order">Order documents in <see cref="F:SignNow.Net.Model.Requests.GetFolderQuery.SortOrder.Ascending"/> or <see cref="F:SignNow.Net.Model.Requests.GetFolderQuery.SortOrder.Descending"/> way.</param>
        </member>
        <member name="T:SignNow.Net.Model.Requests.GetFolderQuery.SortByParam">
            <summary>
            Options to set sort documents in Folder by create, update date or document name.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.Requests.GetFolderQuery.SortByParam.Created">
            <summary>
            Sorts documents by creation date.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.Requests.GetFolderQuery.SortByParam.Updated">
            <summary>
            Sorts documents by update date.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.Requests.GetFolderQuery.SortByParam.DocumentName">
            <summary>
            Sorts documents by name.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.Requests.GetFolderQuery.SortOrder">
            <summary>
            Options to set sort documents in Folder in descending or ascending order.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.Requests.GetFolderQuery.SortOrder.Ascending">
            <summary>
            The order of the documents is ascending.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.Requests.GetFolderQuery.SortOrder.Descending">
            <summary>
            The order of the documents is descending.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.UpdateUserOptions.FirstName">
            <summary>
            User firstname.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.UpdateUserOptions.LastName">
            <summary>
            User lastname.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.UpdateUserOptions.Password">
            <summary>
            User password.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.UpdateUserOptions.OldPassword">
            <summary>
            Old User password.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Requests.UpdateUserOptions.LogOutAll">
            <summary>
            if "true" - all user tokens with Scope <see cref="F:SignNow.Net.Model.Scope.All"/> expire
            if "false" - all user tokens except current one are expired
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.Responses.CreateDocumentFromTemplateResponse">
            <summary>
            Represents response from SignNow API for Create Document from Template request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Responses.CreateDocumentFromTemplateResponse.Id">
            <summary>
            Identity of new Document.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.Responses.CreateTemplateFromDocumentResponse">
            <summary>
            Represents response from SignNow API for Create Template from Document request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Responses.CreateTemplateFromDocumentResponse.Id">
            <summary>
            Identity of new Template.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Responses.FolderIdentityResponse.Id">
            <summary>
            Identity of then newly created/renamed folder.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.DocumentHistoryResponse">
            <summary>
            Represents response from SignNow API for Document history request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DocumentHistoryResponse.Id">
            <summary>
            Unique identifier of history item.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DocumentHistoryResponse.DocumentId">
            <summary>
            Identity of the document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DocumentHistoryResponse.UserId">
            <summary>
            Identity of user who owned this document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DocumentHistoryResponse.Email">
            <summary>
            Email of document owner.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DocumentHistoryResponse.AppName">
            <summary>
            Client Application name
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DocumentHistoryResponse.IpAddress">
            <summary>
            Actor's IP address
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DocumentHistoryResponse.Event">
            <summary>
            Name of event
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DocumentHistoryResponse.Origin">
            <summary>
            An origin of document
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DocumentHistoryResponse.Version">
            <summary>
            Version of signed document (incremented after each signature addition)
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DocumentHistoryResponse.ClientTimestamp">
            <summary>
            Client Application Timestamp of document creation.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DocumentHistoryResponse.Created">
            <summary>
            Timestamp of document creation.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DocumentHistoryResponse.FieldId">
            <summary>
            An ID of specific field
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DocumentHistoryResponse.ElementId">
            <summary>
            An ID of specific element
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DocumentHistoryResponse.JsonAttributes">
            <summary>
            Field attributes (e.g. font, style, size etc.)
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.DownloadDocumentResponse">
            <summary>
            Represents response from SignNow API for Document download request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DownloadDocumentResponse.Filename">
            <summary>
            File name with extension.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DownloadDocumentResponse.Length">
            <summary>
            File length in bytes.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DownloadDocumentResponse.Document">
            <summary>
            File contents as Stream.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.DownloadDocumentResponseDetail">
            <summary>
            Represents response from SignNow API for Document download request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DownloadDocumentResponseDetail.id">
            <summary>
            File name with extension.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DownloadDocumentResponseDetail.Length">
            <summary>
            File length in bytes.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DownloadDocumentResponseDetail.Document">
            <summary>
            File contents as Stream.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.DownloadLinkResponse">
            <summary>
            Represents response for creating one-time link to download document with embedded fields and elements.
            Link can be used once and then will expire.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.DownloadLinkResponse.Url">
            <summary>
            Link to download specified document in PDF format.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.EmbeddedInviteLinkResponse.Link">
            <summary>
            Returns the embedded invite link data for newly created embedded invite.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.EmbeddedInviteData">
            <summary>
            Represents response from SignNow API for create embedded invite request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.EmbeddedInviteData.Id">
            <summary>
            Identity of embedded invite request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.EmbeddedInviteData.Email">
            <summary>
            Signer's email address.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.EmbeddedInviteData.RoleId">
            <summary>
            Signer's role ID.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.EmbeddedInviteData.Order">
            <summary>
            Order of signing. Cannot be 0.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.EmbeddedInviteData.Status">
            <summary>
            Current signing status.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.EmbeddedInviteResponse.InviteData">
            <summary>
            Returns the invite data for newly created embedded invite.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.InviteResponse">
            <summary>
            Represents response from SignNow API for create invite request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.InviteResponse.Id">
            <summary>
            Identity of freeform invite request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.InviteResponse.Status">
            <summary>
            Role-based invite status
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.SigningLinkResponse">
            <summary>
            Represents response from SignNow API for signing link creation request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SigningLinkResponse.Url">
            <summary>
            URL to sign the document via web browser using SignNow credentials.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SigningLinkResponse.AnonymousUrl">
            <summary>
            URL to sign the document via web browser without SignNow credentials.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.UploadDocumentResponse">
            <summary>
            Represents response from SignNow API for upload document request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.UploadDocumentResponse.Id">
            <summary>
            Document ID of then newly created file.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.UploadDocumentResponseDetail">
            <summary>
            Represents response from SignNow API for upload document request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.UploadDocumentResponseDetail.id">
            <summary>
            File name with extension.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.UploadDocumentResponseDetail.Length">
            <summary>
            File length in bytes.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.UploadDocumentResponseDetail.Document">
            <summary>
            File contents as Stream.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.UserCreateResponse">
            <summary>
            Represents response from SignNow API for User create request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.UserCreateResponse.Id">
            <summary>
            User identity.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.UserCreateResponse.Verified">
            <summary>
            User is verified or not.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.UserCreateResponse.Email">
            <summary>
            User email.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.UserUpdateResponse">
            <summary>
            Represents response from SignNow API for User update request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.UserUpdateResponse.Id">
            <summary>
            User identity.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.UserUpdateResponse.FirstName">
            <summary>
            User firstname.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.UserUpdateResponse.LastName">
            <summary>
            User lastname.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.Role">
            <summary>
            Represent document signer roles.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Role.Id">
            <summary>
            Role unique id.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Role.SigningOrder">
            <summary>
            Role signing order.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Role.Name">
            <summary>
            Role signing name.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.Scope">
            <summary>
            The scope granted to the access token.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.Scope.All">
            <summary>
            Scope which granted access to all services.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.Scope.User">
            <summary>
            Scope which garnted access to User secvice.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.SignerOptions">
            <summary>
            Represents optional properties for Signer.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignerOptions.SignerAuth">
            <summary>
            <see cref="T:SignNow.Net.Internal.Model.SignerAuthorization"/> options for Role-based Invite.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignerOptions.RedirectURI">
            <summary>
            Represents the redirect uri for the role.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignerOptions.Email">
            <summary>
            Represents the email address of the signer.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignerOptions.RoleName">
            <summary>
            Represents the name of the role the signer will be required to fulfill.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignerOptions.RoleId">
            <summary>
            Leave empty state “” for a document with one role,
            or get all role IDs from Document and assign a signer to the specific `role_id`
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignerOptions.SigningOrder">
            <summary>
            The order of signing, or Signing step. When there are multiple signers,
            preset who signs the document first, who’s in the second group etc.
            Each group - one signing step. For a freeform invite this equals “1”
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignerOptions.AuthenticationType">
            <summary>
            Authentication type for case, when password used to open the Document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignerOptions.Password">
            <summary>
            Password will be required from signers when they open the document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignerOptions.Phone">
            <summary>
            Phone number to authorize signers when they open the document via phone call or sms code.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignerOptions.ExpirationDays">
            <summary>
            In how many days this invite expires.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignerOptions.RemindAfterDays">
            <summary>
            In how many days will another email be sent to remind of a signature invite.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.SignerOptions.#ctor(System.String,SignNow.Net.Model.Role)">
            <summary>
            Initializes a new instance of the <see cref="T:SignNow.Net.Model.SignerOptions"/> class.
            </summary>
            <param name="email"><see cref="P:SignNow.Net.Model.SignerOptions.Email"/> address of the signer.</param>
            <param name="role"><see cref="T:SignNow.Net.Model.Role"/> of the signer which will be required to fulfill.</param>
            <exception cref="T:System.ArgumentNullException">if <see cref="T:SignNow.Net.Model.Role"/> is null.</exception>
            <exception cref="T:System.ArgumentException">if email is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Model.SignerOptions.SetAuthenticationByPassword(System.String)">
            <summary>
            Set <see cref="P:SignNow.Net.Model.SignerOptions.Password"/> which will be required from signers when they open the document.
            </summary>
            <param name="password">Password for signer to open the document.</param>
            <returns><see cref="T:SignNow.Net.Model.SignerOptions"/></returns>
        </member>
        <member name="M:SignNow.Net.Model.SignerOptions.SetAuthenticationByPhoneCall(System.String)">
            <summary>
            Set <see cref="P:SignNow.Net.Model.SignerOptions.Phone"/> number to authorize signer when they open the document via phone call.
            </summary>
            <param name="phone">Phone number.</param>
            <returns><see cref="T:SignNow.Net.Model.SignerOptions"/></returns>
        </member>
        <member name="M:SignNow.Net.Model.SignerOptions.SetAuthenticationBySms(System.String)">
            <summary>
            Set <see cref="P:SignNow.Net.Model.SignerOptions.Phone"/> number to authorize signer when they open the document via sms code.
            </summary>
            <param name="phone">Phone number.</param>
            <returns><see cref="T:SignNow.Net.Model.SignerOptions"/></returns>
        </member>
        <member name="M:SignNow.Net.Model.SignerOptions.ProcessSetAuthentication(System.Func{System.String,SignNow.Net.Internal.Model.SignerAuthorization},System.String)">
            <summary>
            Delegate which create corresponding signer auth class and set this class as property.
            </summary>
            <param name="action">delegate function</param>
            <param name="authParam">delegate auth param required for construct auth class.</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Model.SignerOptions.ClearSignerAuthentication">
            <summary>
            Clear Signer authentication options.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SignNow.Net.Model.SignInvite.Subject">
            <summary>
            The subject of the email.
            <remarks>
                If <see cref="P:SignNow.Net.Model.SignInvite.Subject"/> is null - default subject will be used:
                `sender.email@signnow.com` Needs Your Signature
            </remarks>
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignInvite.Message">
            <summary>
            The message body of the email invite.
            <remarks>
                If <see cref="P:SignNow.Net.Model.SignInvite.Message"/> is null - default message will be used:
                `sender.email@signnow.com` invited you to sign `DocumentName`
            </remarks>
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignInvite.Cc">
            <summary>
            The list with emails of copy receivers.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.SignInvite.AddCcRecipients(System.String)">
            <summary>
            Add an Email to CC list.
            </summary>
            <param name="email">Email of copy receiver.</param>
            <exception cref="T:System.ArgumentException">when an email is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Model.SignInvite.AddCcRecipients(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:SignNow.Net.Model.SignInvite.AddCcRecipients(System.String)"/>
            <param name="emails">Emails list of copy receivers.</param>
        </member>
        <member name="T:SignNow.Net.Model.FreeFormSignInvite">
            <summary>
            Freeform invite - an invitation to sign a document which doesn't contain any fillable fields.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FreeFormSignInvite.Recipient">
            <summary>
            An email of signer`s that you would like to send the invite to.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.FreeFormSignInvite.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:SignNow.Net.Model.FreeFormSignInvite"/>
            </summary>
            <param name="to">The email of the invitee.</param>
        </member>
        <member name="M:SignNow.Net.Model.FreeFormSignInvite.#ctor(System.String,System.String)">
            <inheritdoc cref="M:SignNow.Net.Model.FreeFormSignInvite.#ctor(System.String)"/>
            <param name="to">The email of the invitee.</param>
            <param name="cc">The email of copy receiver.</param>
            <exception cref="T:System.ArgumentException">for not valid <paramref name="cc"/> email address.</exception>
        </member>
        <member name="M:SignNow.Net.Model.FreeFormSignInvite.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:SignNow.Net.Model.FreeFormSignInvite.#ctor(System.String)"/>
            <param name="to">The email of the invitee.</param>
            <param name="cc">The emails list of copy receivers.</param>
            <exception cref="T:System.ArgumentException">for not valid <paramref name="cc"/> email address.</exception>
        </member>
        <member name="T:SignNow.Net.Model.RoleBasedInvite">
            <summary>
            Role-based invite - an invitation to sign a document
            which contains at least one fillable field assigned to one role.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.RoleBasedInvite.RecipientList">
            <summary>
            Represent recipients for which an invitation to sign should be sent.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.RoleBasedInvite.#ctor(SignNow.Net.Model.SignNowDocument)">
            <summary>
            Construct Role-based invite.
            </summary>
            <param name="document">SignNow document for which an invitation to sign should be sent.</param>
            <exception cref="T:System.ArgumentNullException"><see cref="T:SignNow.Net.Model.SignNowDocument"/> cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Document <see cref="P:SignNow.Net.Model.SignNowDocument.Roles"/> cannot be empty.</exception>
        </member>
        <member name="M:SignNow.Net.Model.RoleBasedInvite.#ctor(SignNow.Net.Model.SignNowDocument,System.String)">
            <inheritdoc cref="M:SignNow.Net.Model.RoleBasedInvite.#ctor(SignNow.Net.Model.SignNowDocument)"/>
            <param name="document">SignNow document for which an invitation to sign should be sent.</param>
            <param name="cc">The email of copy receiver.</param>
            <exception cref="T:System.ArgumentException">for not valid <paramref name="cc"/> email address.</exception>
        </member>
        <member name="M:SignNow.Net.Model.RoleBasedInvite.#ctor(SignNow.Net.Model.SignNowDocument,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:SignNow.Net.Model.RoleBasedInvite.#ctor(SignNow.Net.Model.SignNowDocument)"/>
            <param name="document">SignNow document for which an invitation to sign should be sent.</param>
            <param name="cc">The emails list of copy receivers.</param>
            <exception cref="T:System.ArgumentException">for not valid <paramref name="cc"/> email address.</exception>
        </member>
        <member name="M:SignNow.Net.Model.RoleBasedInvite.DocumentRoles">
            <summary>
            Return Roles read only collection for current document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Model.RoleBasedInvite.AddRoleBasedInvite(SignNow.Net.Model.SignerOptions)">
            <summary>
            Add user role with options to Role-based invite.
            </summary>
            <param name="options">Role <see cref="T:SignNow.Net.Model.SignerOptions"/></param>
            <exception cref="T:System.ArgumentNullException"><see cref="T:SignNow.Net.Model.Role"/> cannot be null.</exception>
            <exception cref="T:SignNow.Net.Exceptions.SignNowException">Allowed only <see cref="T:SignNow.Net.Model.Role"/> which is exists in current Document</exception>
        </member>
        <member name="T:SignNow.Net.Model.EmbeddedSigningInvite">
            <summary>
            Embedded signing - having the documents signed within your website or app by creating an embedded invite.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.EmbeddedSigningInvite.EmbeddedSignInvites">
            <summary>
            List with Embedded Sign Invites options.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.EmbeddedSigningInvite.#ctor(SignNow.Net.Model.SignNowDocument)">
            <summary>
            Initialize a new instance of Embedded Signing Invite.
            </summary>
            <param name="document">SignNow document which you would like to sign with Embedded Invite.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="document"/> can not be null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="document"/> does not have <see cref="T:SignNow.Net.Model.Role"/></exception>
            <exception cref="T:System.ArgumentException">When <see cref="T:SignNow.Net.Model.FreeFormSignInvite"/> exists in a <paramref name="document"/></exception>
        </member>
        <member name="M:SignNow.Net.Model.EmbeddedSigningInvite.AddEmbeddedSigningInvite(SignNow.Net.Model.EmbeddedInvite)">
            <summary>
            Add Embedded Sign Invite options for a Signer.
            </summary>
            <param name="options">Embedded invite params.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="options.RoleId.RoleId"/> does not exists in document Roles.</exception>
        </member>
        <member name="T:SignNow.Net.Model.SignNowDocument">
            <summary>
            Represents SignNow document object.
            Document is the fundamental unit of every e-Signature operation.
            <para>It contains:</para>
            <list type="bullet">
            <item><description>Metadata: file name, size, extension, ID;</description></item>
            <item><description>Fields, field content elements (texts, checks, signatures, etc...);</description></item>
            <item><description>Invites, statuses of the invites;</description></item>
            <item><description>Document <see cref="T:SignNow.Net.Model.Role"/>;</description></item>
            </list>
            </summary>
            <remarks>
            This part contains related to Fields and Fields value retrieval methods only.
            </remarks>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.Id">
            <summary>
            Identity of specific document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.OriginDocumentId">
            <summary>
            An id of original document (if document is a copy).
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.UserId">
            <summary>
            Identity of user that uploaded document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.OriginUserId">
            <summary>
            Identity of user who created document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.Name">
            <summary>
            Name of document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.OriginalName">
            <summary>
            Original filename with document format (.pdf, .doc, etc...).
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.PageCount">
            <summary>
            Amount of pages in the document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.Created">
            <summary>
            Timestamp document was created.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.Updated">
            <summary>
            Timestamp document was updated.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.Owner">
            <summary>
            Email of document owner.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.IsTemplate">
            <summary>
            Is document a template or not.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.Roles">
            <summary>
            The document signer roles.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.Signatures">
            <summary>
            The document <see cref="T:SignNow.Net.Model.FieldContents.SignatureContent"/>
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.fields">
            <summary>
            The document <see cref="T:SignNow.Net.Model.Field"/>
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.Fields">
            <summary>
            All the document fields
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.InviteRequests">
            <summary>
            The document freeform invite requests.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.FieldInvites">
            <summary>
            The document field invite requests.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.InvitesStatus">
            <summary>
            Provides common details of any kind of invites (freeform or role-based)
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.Status">
            <summary>
            The document sign status.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.SignNowDocument.CheckDocumentStatus">
            <summary>
            Detect the document status corresponding to summary states of invites statuses
            </summary>
            <returns>One of the <see cref="T:SignNow.Net.Model.DocumentStatus"/></returns>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument._status">
            <summary>
            Cache document status
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.SignNowDocument._emptyInvites">
            <summary>
            Default empty Invites collection for case when document haven't any invites
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.Texts">
            <summary>
            All the document <see cref="T:SignNow.Net.Model.FieldContents.TextContent"/> fields.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.Hyperlinks">
            <summary>
            All the document <see cref="T:SignNow.Net.Model.FieldContents.HyperlinkContent"/> fields.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.Checkboxes">
            <summary>
            All the documents <see cref="T:SignNow.Net.Model.FieldContents.CheckboxContent"/> fields.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.Attachments">
            <summary>
            All the documents <see cref="T:SignNow.Net.Model.FieldContents.AttachmentContent"/> fields.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.Enumerations">
            <summary>
            All the documents <see cref="T:SignNow.Net.Model.FieldContents.EnumerationContent"/> fields.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowDocument.Radiobuttons">
            <summary>
            All the documents <see cref="T:SignNow.Net.Model.FieldContents.RadiobuttonContent"/> fields.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.SignNowDocument.GetFieldContent(SignNow.Net.Interfaces.ISignNowField)">
            <summary>
            Find Field value by <see cref="T:SignNow.Net.Model.Field"/> metadata.
            </summary>
            <param name="fieldMeta">Field metadata.</param>
            <returns><see cref="T:SignNow.Net.Interfaces.ISignNowContent"/> object that represents state for <see cref="P:SignNow.Net.Model.Field.Type"/></returns>
        </member>
        <member name="P:SignNow.Net.Model.BaseFolder.Id">
            <summary>
            Unique identifier of the folder.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.BaseFolder.ParentId">
            <summary>
            Identifier for the parent folder that contains this folder.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.BaseFolder.UserId">
            <summary>
            Identifier for the folder owner.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.BaseFolder.Name">
            <summary>
            The name of the folder.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.BaseFolder.Created">
            <summary>
            Timestamp folder was created.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.BaseFolder.Shared">
            <summary>
            Whether or not this folder is shared.
            </summary>
            /// <remarks>
            <c>true</c> - it is a shared folder; <c>false</c> - it's not a shared folder.
            </remarks>
        </member>
        <member name="T:SignNow.Net.Model.Folder">
            <summary>
            Folders serve for storing user's documents.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Folder.TotalDocuments">
            <summary>
            Amount of documents in this folder.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Folder.TotalTemplates">
            <summary>
            Amount of templates in this folder.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Folder.TotalFolders">
            <summary>
            Amount of subfolders in this folder.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.SignNowFolders">
            <summary>
            Represents all folders of a user.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowFolders.SystemFolder">
            <summary>
            Whether or not this is a system folder.
            </summary>
            <remarks>
            <c>true</c> - it is a system folder; <c>false</c> - it's not a system folder.
            </remarks>
        </member>
        <member name="P:SignNow.Net.Model.SignNowFolders.TotalDocuments">
            <summary>
            Amount of documents in this folder.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowFolders.Folders">
            <summary>
            <see cref="T:SignNow.Net.Model.Folder"/> objects stored in this folder and their attributes.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowFolders.Documents">
            <summary>
            <see cref="T:SignNow.Net.Model.SignNowDocument"/> objects stored in this folder and their attributes.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.SignNowInvite">
            <summary>
            Represents common (freeform or role-based) details of invite.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.SignNowInvite.Id">
            <inheritdoc cref="T:SignNow.Net.Interfaces.ISignNowInviteStatus"/>
        </member>
        <member name="P:SignNow.Net.Model.SignNowInvite.SignerEmail">
            <inheritdoc cref="T:SignNow.Net.Interfaces.ISignNowInviteStatus"/>
        </member>
        <member name="P:SignNow.Net.Model.SignNowInvite.Status">
            <inheritdoc cref="T:SignNow.Net.Interfaces.ISignNowInviteStatus"/>
        </member>
        <member name="P:SignNow.Net.Model.SignNowInvite.Created">
            <inheritdoc />
        </member>
        <member name="T:SignNow.Net.Model.FieldInvite">
            <summary>
            Represents details of the field invite for the Document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldInvite.Id">
            <summary>
            Unique identifier of field invite.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldInvite.SignerEmail">
            <inheritdoc cref="T:SignNow.Net.Model.SignNowInvite"/>
        </member>
        <member name="P:SignNow.Net.Model.FieldInvite.Status">
            <summary>
            Status of the field invite sign request.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldInvite.RoleName">
            <summary>
            Signer role name.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldInvite.RoleId">
            <summary>
            Signer role identity.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldInvite.Updated">
            <summary>
            Timestamp document was updated.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldInvite.ExpiredOn">
            <summary>
            Date and time of invite expiration.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FieldInvite.IsEmbedded">
            <summary>
            Is embedded signing invite or not.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.FreeformInvite">
            <summary>
            Represents details of freeform invite for the document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FreeformInvite.Id">
            <summary>
            Sign invite unique id.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FreeformInvite.SignerEmail">
            <summary>
            Email of user who invited to sign the document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FreeformInvite.Status">
            <summary>
            <see cref="T:SignNow.Net.Model.FreeformInvite"/> sign status of current signer.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FreeformInvite.UserId">
            <summary>
            Identity of user who invited to sign the document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FreeformInvite.SignatureId">
            <summary>
            Identity of the signers' signature
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FreeformInvite.Owner">
            <summary>
            Email of document owner.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.FreeformInvite.IsCanceled">
            <summary>
            Is freeform sign invite canceled or not.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.DocumentStatus">
            <summary>
            Represents statuses of document signing state.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.DocumentStatus.NoInvite">
            <summary>
            Status for case when the document haven't any sign request.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.DocumentStatus.Pending">
            <summary>
            Status for case when the document have one or many sign requests which are not signed yet.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.DocumentStatus.Completed">
            <summary>
            Status for case when the document have one or many sign requests which are all signed.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.InviteStatus">
            <summary>
            Represents statuses for fields (field invite or role-based invite)
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.InviteStatus.Created">
            <summary>
            Status of field for document group when invite or action has been created but is not waiting to be signed.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.InviteStatus.Pending">
            <summary>
            Status of field for case when the document have one or many sign requests which are not signed yet.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.InviteStatus.Fulfilled">
            <summary>
            Status of field for case when the fill form in the document was filled by signer.
            </summary>
        </member>
        <member name="F:SignNow.Net.Model.InviteStatus.Skipped">
            <summary>
            Status of field for document with conditional fields which can be skipped
            by choosing one of condition.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.Token">
            <summary>
            The access token you can use to make requests on behalf of this SignNow account.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Token.ExpiresIn">
            <summary>
            Time in seconds for which the <see cref="T:SignNow.Net.Model.Token"/> was issued.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Token.AccessToken">
            <summary>
            Access <see cref="T:SignNow.Net.Model.Token"/>
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Token.RefreshToken">
            <summary>
            Refresh <see cref="T:SignNow.Net.Model.Token"/>
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Token.Scope">
            <summary>
            Access <see cref="T:SignNow.Net.Model.Scope"/>
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Token.TokenType">
            <summary>
            Type of access token (e.g. 'bearer')
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.Token.AppToken">
            <summary>
            Application Basic Token.
            </summary>
        </member>
        <member name="M:SignNow.Net.Model.Token.GetAuthorizationHeaderValue">
            <summary>
            Returns formatted Authorization header param
            </summary>
            <returns>String value in format: 'bearer access_token'</returns>
        </member>
        <member name="T:SignNow.Net.Model.TokenType">
            <summary>
            Represents types of Token.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.User">
            <summary>
            Represent a user resource
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.User.Id">
            <summary>
            User unique id
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.User.Active">
            <summary>
            User is active or not.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.User.Verified">
            <summary>
            User is verified or not.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.User.IsLoggedIn">
            <summary>
            User is logged or not.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.User.FirstName">
            <summary>
            User first name.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.User.LastName">
            <summary>
            User last name.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.User.Email">
            <summary>
            User email.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.User.Created">
            <summary>
            Timestamp User was created.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.User.BillingPeriod">
            <summary>
            User billing period data
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.User.Companies">
            <summary>
            Companies which user belongs to.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.User.MonthlyDocumentCount">
            <summary>
            Documents used by User per month.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.User.LifetimeDocumentCount">
            <summary>
            The number of documents used by User for the entire time.
            </summary>
        </member>
        <member name="T:SignNow.Net.Model.UserBilling">
            <summary>
            User billing period data
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.UserBilling.StartDate">
            <summary>
            User billing period start date.
            </summary>
        </member>
        <member name="P:SignNow.Net.Model.UserBilling.EndDate">
            <summary>
            User billing period end date.
            </summary>
        </member>
        <member name="T:SignNow.Net.OAuth2Service">
            <summary>
            OAuth2 implementation of <see cref="T:SignNow.Net.Interfaces.IOAuth2Service"/>
            </summary>
        </member>
        <member name="P:SignNow.Net.OAuth2Service.ClientId">
            <summary>
            Application client identity.
            </summary>
        </member>
        <member name="P:SignNow.Net.OAuth2Service.ClientSecret">
            <summary>
            Application client secret.
            </summary>
        </member>
        <member name="P:SignNow.Net.OAuth2Service.OAuthRequestUrl">
            <summary>
            SignNow OAuth request <see cref="T:System.Uri"/>
            </summary>
        </member>
        <member name="M:SignNow.Net.OAuth2Service.#ctor(System.String,System.String)">
            <inheritdoc cref="M:SignNow.Net.OAuth2Service.#ctor(System.Uri,System.String,System.String,SignNow.Net.Interfaces.ISignNowClient)" />
        </member>
        <member name="M:SignNow.Net.OAuth2Service.#ctor(System.Uri,System.String,System.String)">
            <inheritdoc cref="M:SignNow.Net.OAuth2Service.#ctor(System.Uri,System.String,System.String,SignNow.Net.Interfaces.ISignNowClient)" />
        </member>
        <member name="M:SignNow.Net.OAuth2Service.#ctor(System.Uri,System.String,System.String,SignNow.Net.Interfaces.ISignNowClient)">
            <summary>
            Constructs an <see cref="T:SignNow.Net.OAuth2Service"/>
            </summary>
            <param name="apiBaseUrl">SignNow API <see cref="P:SignNow.Net.Service.WebClientBase.ApiBaseUrl"/></param>
            <param name="clientId">Application <see cref="P:SignNow.Net.OAuth2Service.ClientId"/></param>
            <param name="clientSecret">Application <see cref="P:SignNow.Net.OAuth2Service.ClientSecret"/></param>
            <param name="signNowClient">Http Client</param>
        </member>
        <member name="M:SignNow.Net.OAuth2Service.GetAuthorizationUrl(System.Uri)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IOAuth2Service.GetAuthorizationUrl(System.Uri)" />
        </member>
        <member name="M:SignNow.Net.OAuth2Service.GetTokenAsync(System.String,System.String,SignNow.Net.Model.Scope,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IOAuth2Service.GetTokenAsync(System.String,System.String,SignNow.Net.Model.Scope,System.Threading.CancellationToken)" />
        </member>
        <member name="M:SignNow.Net.OAuth2Service.GetTokenAsync(System.String,SignNow.Net.Model.Scope,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IOAuth2Service.GetTokenAsync(System.String,SignNow.Net.Model.Scope,System.Threading.CancellationToken)" />
        </member>
        <member name="M:SignNow.Net.OAuth2Service.RefreshTokenAsync(SignNow.Net.Model.Token,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IOAuth2Service.RefreshTokenAsync(SignNow.Net.Model.Token,System.Threading.CancellationToken)" />
        </member>
        <member name="M:SignNow.Net.OAuth2Service.ValidateTokenAsync(SignNow.Net.Model.Token,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IOAuth2Service.ValidateTokenAsync(SignNow.Net.Model.Token,System.Threading.CancellationToken)" />
        </member>
        <member name="M:SignNow.Net.OAuth2Service.ExecuteTokenRequest(System.Collections.Generic.Dictionary{System.String,System.String},System.Threading.CancellationToken)">
            <summary>
            Processing Http request for Token issue.
            </summary>
            <param name="body">Dictionary with requested params.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns><see cref="T:SignNow.Net.Model.Token"/> response</returns>
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.#ctor(SignNow.Net.Model.Token)">
            <inheritdoc cref="M:SignNow.Net.Service.DocumentService.#ctor(System.Uri,SignNow.Net.Model.Token,SignNow.Net.Interfaces.ISignNowClient)"/>
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.#ctor(System.Uri,SignNow.Net.Model.Token)">
            <inheritdoc cref="M:SignNow.Net.Service.DocumentService.#ctor(System.Uri,SignNow.Net.Model.Token,SignNow.Net.Interfaces.ISignNowClient)"/>
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.#ctor(System.Uri,SignNow.Net.Model.Token,SignNow.Net.Interfaces.ISignNowClient)">
            <summary>
            Creates new instance of <see cref="T:SignNow.Net.Service.DocumentService"/>
            </summary>
            <param name="baseApiUrl"><see cref="F:SignNow.Net.Internal.Constants.ApiUrl.ApiBaseUrl"/></param>
            <param name="token"><see cref="T:SignNow.Net.Model.Token"/></param>
            <param name="signNowClient"><see cref="T:SignNow.Net.Interfaces.ISignNowClient"/></param>
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.GetDocumentAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException">If <see paramref="documentId"/> is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.CreateSigningLinkAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.DeleteDocumentAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException">If <see paramref="documentId"/> is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.UploadDocumentAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.UploadDocumentWithFieldExtractAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.DownloadDocumentAsync(System.String,SignNow.Net.Model.DownloadType,System.Threading.CancellationToken)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException">If <see paramref="documentId"/> is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.MergeDocumentsAsync(System.String,System.Collections.Generic.IEnumerable{SignNow.Net.Model.SignNowDocument},System.Threading.CancellationToken)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException">If <see paramref="documents"/> is null.</exception>
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.MoveDocumentAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="!:IDocumentService.MoveDocumentAsync"/>
            <exception cref="T:System.ArgumentException">If <paramref name="documentId"/> is not valid.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="folderId"/> is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.GetDocumentHistoryAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IDocumentService.GetDocumentHistoryAsync(System.String,System.Threading.CancellationToken)"/>
            <exception cref="T:System.ArgumentException">If <paramref name="documentId"/> is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.CreateOneTimeDownloadLinkAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException">If <paramref name="documentId"/> is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.CreateTemplateFromDocumentAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException">If <paramref name="documentId"/> is not valid.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="templateName"/> is null.</exception>
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.CreateDocumentFromTemplateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException">If <paramref name="templateId"/> is not valid.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="documentName"/> is null.</exception>
        </member>
        <member name="M:SignNow.Net.Service.DocumentService.GetNewDocumentIdFromTemplateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:SignNow.Net.Service.FolderService">
            <summary>
            Folder service allows you to view, create, rename and delete folders for users.
            </summary>
        </member>
        <member name="M:SignNow.Net.Service.FolderService.#ctor(SignNow.Net.Model.Token)">
            <inheritdoc cref="M:SignNow.Net.Service.FolderService.#ctor(System.Uri,SignNow.Net.Model.Token,SignNow.Net.Interfaces.ISignNowClient)"/>
        </member>
        <member name="M:SignNow.Net.Service.FolderService.#ctor(System.Uri,SignNow.Net.Model.Token)">
            <inheritdoc cref="M:SignNow.Net.Service.FolderService.#ctor(System.Uri,SignNow.Net.Model.Token,SignNow.Net.Interfaces.ISignNowClient)"/>
        </member>
        <member name="M:SignNow.Net.Service.FolderService.#ctor(System.Uri,SignNow.Net.Model.Token,SignNow.Net.Interfaces.ISignNowClient)">
            <summary>
            Constructs folder service.
            </summary>
            <param name="baseApiUrl">Base SignNow API URL.</param>
            <param name="token">Access token.</param>
            <param name="client">Http client.</param>
        </member>
        <member name="M:SignNow.Net.Service.FolderService.GetAllFoldersAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IFolderService.GetAllFoldersAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:SignNow.Net.Service.FolderService.GetFolderAsync(System.String,SignNow.Net.Model.Requests.GetFolderOptions,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IFolderService.GetFolderAsync(System.String,SignNow.Net.Model.Requests.GetFolderOptions,System.Threading.CancellationToken)"/>
            <exception cref="T:System.ArgumentException">If folder identity is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Service.FolderService.CreateFolderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IFolderService.CreateFolderAsync(System.String,System.String,System.Threading.CancellationToken)"/>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is empty.</exception>
            <exception cref="T:System.ArgumentException">If folder <paramref name="parentId"/> is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Service.FolderService.DeleteFolderAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IFolderService.DeleteFolderAsync(System.String,System.Threading.CancellationToken)"/>
            <exception cref="T:System.ArgumentException">If <paramref name="folderId"/> is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Service.FolderService.RenameFolderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IFolderService.RenameFolderAsync(System.String,System.String,System.Threading.CancellationToken)"/>
            <exception cref="T:System.ArgumentException">If <paramref name="name"/> is empty.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="folderId"/> is not valid.</exception>
        </member>
        <member name="M:SignNow.Net.Service.UserService.CreateUserAsync(SignNow.Net.Model.Requests.CreateUserOptions,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IUserService.CreateUserAsync(SignNow.Net.Model.Requests.CreateUserOptions,System.Threading.CancellationToken)" />
        </member>
        <member name="M:SignNow.Net.Service.UserService.GetCurrentUserAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IUserService.GetCurrentUserAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:SignNow.Net.Service.UserService.UpdateUserAsync(SignNow.Net.Model.Requests.UpdateUserOptions,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IUserService.UpdateUserAsync(SignNow.Net.Model.Requests.UpdateUserOptions,System.Threading.CancellationToken)" />
        </member>
        <member name="M:SignNow.Net.Service.UserService.SendVerificationEmailAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IUserService.SendVerificationEmailAsync(System.String,System.Threading.CancellationToken)" />
            <exception cref="T:System.ArgumentException"><paramref name="email"/> address is not valid</exception>
        </member>
        <member name="M:SignNow.Net.Service.UserService.SendPasswordResetLinkAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IUserService.SendPasswordResetLinkAsync(System.String,System.Threading.CancellationToken)"/>
            <exception cref="T:System.ArgumentException"><paramref name="email"/> address is not valid</exception>
        </member>
        <member name="M:SignNow.Net.Service.UserService.CreateInviteAsync(System.String,SignNow.Net.Model.SignInvite,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.ISignInvite.CreateInviteAsync(System.String,SignNow.Net.Model.SignInvite,System.Threading.CancellationToken)" />
            <exception cref="T:System.ArgumentNullException"><paramref name="invite"/> cannot be null.</exception>
            <exception cref="T:System.ArgumentException">Invalid format of <paramref name="documentId"/></exception>
        </member>
        <member name="M:SignNow.Net.Service.UserService.CreateInviteAsync(System.String,SignNow.Net.Model.EmbeddedSigningInvite,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.ISignInvite.CreateInviteAsync(System.String,SignNow.Net.Model.EmbeddedSigningInvite,System.Threading.CancellationToken)" />
            <exception cref="T:System.ArgumentNullException"><paramref name="invite"/> cannot be null.</exception>
        </member>
        <member name="M:SignNow.Net.Service.UserService.GenerateEmbeddedInviteLinkAsync(System.String,SignNow.Net.Model.Requests.CreateEmbedLinkOptions,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.ISignInvite.GenerateEmbeddedInviteLinkAsync(System.String,SignNow.Net.Model.Requests.CreateEmbedLinkOptions,System.Threading.CancellationToken)" />
            <exception cref="T:System.ArgumentNullException"><paramref name="options"/> cannot be null.</exception>
        </member>
        <member name="M:SignNow.Net.Service.UserService.CancelEmbeddedInviteAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.ISignInvite.CancelEmbeddedInviteAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:SignNow.Net.Service.UserService.CancelInviteAsync(SignNow.Net.Model.FreeformInvite,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.ISignInvite.CancelInviteAsync(SignNow.Net.Model.FreeformInvite,System.Threading.CancellationToken)" />
            <exception cref="T:System.ArgumentNullException"><paramref name="invite"/> cannot be null.</exception>
        </member>
        <member name="M:SignNow.Net.Service.UserService.CancelInviteAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.ISignInvite.CancelInviteAsync(System.String,System.Threading.CancellationToken)" />
            <exception cref="T:System.ArgumentException">Invalid format of <paramref name="documentId"/>.</exception>
        </member>
        <member name="M:SignNow.Net.Service.UserService.ProcessCancelInviteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Process Cancel invite request.
            </summary>
            <param name="requestedDocument">Relative Url to process request.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Service.UserService.GetModifiedDocumentsAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IUserService.GetModifiedDocumentsAsync(System.Int32,System.Threading.CancellationToken)" />
        </member>
        <member name="M:SignNow.Net.Service.UserService.GetUserDocumentsAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.IUserService.GetUserDocumentsAsync(System.Int32,System.Threading.CancellationToken)" />
        </member>
        <member name="M:SignNow.Net.Service.UserService.GetDocumentsAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns an enumerable of user's documents.
            </summary>
            <param name="relativeUrl">Relative URL for documents (modified or not).</param>
            <param name="perPage">How many document objects to display per page in response.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns></returns>
        </member>
        <member name="P:SignNow.Net.Service.WebClientBase.SignNowClient">
            <summary>
            SignNow HTTP Client.
            </summary>
            <value><see cref="P:SignNow.Net.Service.WebClientBase.SignNowClient"/></value>
        </member>
        <member name="P:SignNow.Net.Service.WebClientBase.ApiBaseUrl">
            <summary>
            Base SignNow api URL.
            </summary>
            <value><see cref="T:System.Uri"/></value>
        </member>
        <member name="M:SignNow.Net.Service.WebClientBase.#ctor(System.Uri,SignNow.Net.Interfaces.ISignNowClient)">
            <summary>
            Base Web Client for HTTP calls
            </summary>
            <param name="apiBaseUrl">Base SignNow api URL</param>
            <param name="signNowClient">SignNow HTTP Client</param>
        </member>
        <member name="T:SignNow.Net.SignNowContext">
            <summary>
            Service container with all SignNow services
            </summary>
        </member>
        <member name="T:SignNow.Net.Internal.Constants.ApiUrl">
            <summary>
            Determines base SignNow API URL.
            </summary>
        </member>
        <member name="F:SignNow.Net.Internal.Constants.ApiUrl.ApiBaseUrl">
            <summary>
            Base SignNow API URL for Debug configuration.
            </summary>
        </member>
        <member name="F:SignNow.Net.Internal.Extensions.ValidatorExtensions.IdPattern">
            <summary>
            Pattern for SignNow identity (Document, invite...)
            The required format: 40 characters long, case-sensitive, letters and numbers, underscore allowed.
            </summary>
        </member>
        <member name="F:SignNow.Net.Internal.Extensions.ValidatorExtensions.EmailPattern">
            <summary>
            Pattern for Email address validation
            The required valid email address: e.g john+1@gmail.com or john123@gmail.com
            </summary>
        </member>
        <member name="M:SignNow.Net.Internal.Extensions.ValidatorExtensions.ValidateId(System.String)">
            <summary>
            Validates SignNow ID for documents, invites, etc...
            </summary>
            <param name="id">Identity of the document or invite.</param>
            <exception cref="T:System.ArgumentException">Invalid format of ID.</exception>
        </member>
        <member name="M:SignNow.Net.Internal.Extensions.ValidatorExtensions.ValidateEmail(System.String)">
            <summary>
            Validates email addresses.
            </summary>
            <param name="email">Email address.</param>
            <returns>Valid email address.</returns>
            <exception cref="T:System.ArgumentException">if email address is not valid.</exception>
        </member>
        <member name="T:SignNow.Net.Internal.Helpers.Converters.StringBase64ToByteArrayJsonConverter">
            <summary>
            Converts Base64 <see cref="T:System.String"/> to <see cref="T:System.Byte"/>[] to and from JSON.
            </summary>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.StringBase64ToByteArrayJsonConverter.CanConvert(System.Type)">
            <inheritdoc cref="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)" />
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.StringBase64ToByteArrayJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" />
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.StringBase64ToByteArrayJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)"/>
        </member>
        <member name="T:SignNow.Net.Internal.Helpers.Converters.StringToBoolJsonConverter">
            <summary>
            Converts <see cref="T:System.String"/> to <see cref="T:System.Boolean"/> to and from JSON.
            </summary>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.StringToBoolJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" />
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.StringToBoolJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" />>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.StringToBoolJsonConverter.CanConvert(System.Type)">
            <inheritdoc cref="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)" />
        </member>
        <member name="T:SignNow.Net.Internal.Helpers.Converters.StringToIntJsonConverter">
            <summary>
            Converts <see cref="T:System.String"/> to <see cref="T:System.Int32"/> to and from JSON.
            </summary>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.StringToIntJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" />
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.StringToIntJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" />
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.StringToIntJsonConverter.CanConvert(System.Type)">
            <inheritdoc cref="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)" />
        </member>
        <member name="T:SignNow.Net.Internal.Helpers.Converters.StringToUriJsonConverter">
            <summary>
            Converts <see cref="T:System.String"/> to <see cref="T:System.Uri"/> to and from JSON.
            </summary>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.StringToUriJsonConverter.CanConvert(System.Type)">
            <inheritdoc cref="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)" />
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.StringToUriJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" />
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.StringToUriJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)"/>
        </member>
        <member name="T:SignNow.Net.Internal.Helpers.Converters.UnixTimeStampJsonConverter">
            <summary>
            Converts Unix timestamps to <see cref="T:System.DateTime"/> from JSON.
            </summary>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.UnixTimeStampJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)" />
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.UnixTimeStampJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc cref="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" />
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.UnixTimeStampJsonConverter.CanConvert(System.Type)">
            <inheritdoc cref="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)" />
        </member>
        <member name="T:SignNow.Net.Internal.Helpers.Converters.UnixTimeStampConverter">
            <summary>
            Converts <see cref="T:System.DateTime"/> to and from Unix timestamp.
            </summary>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.UnixTimeStampConverter.FromUnixTimestamp(System.Int64)">
            <summary>
            Converts Unix timestamp to <see cref="T:System.DateTime"/>
            </summary>
            <param name="unixTime">Timestamp in Unix format.</param>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Converters.UnixTimeStampConverter.ToUnixTimestamp(System.DateTime)">
            <summary>
            Converts <see cref="T:System.DateTime"/> to Unix timestamp.
            </summary>
            <param name="current">Date which should be converted in Unix timestamp.</param>
        </member>
        <member name="T:SignNow.Net.Internal.Helpers.Guard">
            <summary>
            Helper class that prevents possible null reference exceptions.
            </summary>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Guard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Ensures that the specified argument is not null.
            </summary>
            <param name="argument">The argument.</param>
            <param name="argumentName">The argument name.</param>
            <example>
               Guard.ArgumentNotNull(input, nameof(input));
            </example>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Guard.PropertyNotNull(System.Object,System.String,System.String)">
            <summary>
            Ensures that the specified object property is not null.
            </summary>
            <param name="property">The property.</param>
            <param name="argumentName">Name of the argument for validation.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.Guard.ArgumentIsNotEmptyString(System.String,System.String,System.String)">
            <summary>
            Ensures that the specified string is not null, whitespace or empty.
            </summary>
            <param name="argument">Input string for validation.</param>
            <param name="argumentName">Name of the argument for validation.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="argument"/> is null, empty or whitespace.</exception>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.HttpContentToObjectAdapter`1.Adapt(System.Net.Http.HttpContent)">
            <inheritdoc />
            <returns>Response JSON content deserialized to <typeparamref name="TObject"/></returns>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.HttpContentToStringAdapter.Adapt(System.Net.Http.HttpContent)">
            <inheritdoc />
            <returns>Content as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.HttpContentToStreamAdapter.Adapt(System.Net.Http.HttpContent)">
            <inheritdoc />
            <returns>Content as a <see cref="T:System.IO.Stream"/></returns>
        </member>
        <member name="T:SignNow.Net.Internal.Helpers.UserAgentSdkHeaders">
            <summary>
            Creates User-Agent string from current runtime info
            </summary>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.UserAgentSdkHeaders.BuildUserAgentString">
            <summary>
            Creates pre-formatted string with SDK, OS, Runtime information
            e.g.: client_name>/version (OS_type OS_release; platform; arch) runtime/version
            </summary>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Internal.Helpers.UserAgentSdkHeaders.RawOsDescription">
            <summary>
            Returns RAW runtime information with OS details.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SignNow.Net.Internal.Infrastructure.RuntimeInfo">
            <summary>
            Detect OS name, platform and architecture.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Infrastructure.RuntimeInfo.OsName">
            <summary>
            Returns OS name (e.g. Linux, macOs, Windows)
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Infrastructure.RuntimeInfo.Arch">
            <summary>
            Returns OS architecture.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Infrastructure.RuntimeInfo.Platform">
            <summary>
            Returns OS platform.
            </summary>
        </member>
        <member name="M:SignNow.Net.Internal.Infrastructure.RuntimeInfo.GetOSName">
            <summary>
            Gets OS name from runtime
            </summary>
            <returns>Windows, Linux, macOS or Unknown</returns>
        </member>
        <member name="M:SignNow.Net.Internal.Infrastructure.RuntimeInfo.GetOsVersion">
            <summary>
            Gets OS version from runtime
            </summary>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Internal.Infrastructure.RuntimeInfo.GetArchitecture">
            <summary>
            Gets OS architecture from runtime
            </summary>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Internal.Infrastructure.RuntimeInfo.GetPlatform">
            <summary>
            Gets OS platform from runtime.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Internal.Infrastructure.RuntimeInfo.GetWindowsVersion(System.String)">
            <summary>
            Get Windows version from string with os details.
            </summary>
            <param name="osDescription"></param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Internal.Infrastructure.RuntimeInfo.GetLinuxVersion(System.String)">
            <summary>
            Get Linux version from string with kernel details.
            </summary>
            <param name="kernel"></param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Internal.Infrastructure.RuntimeInfo.GetMacOsVersion(System.String)">
            <summary>
            Get MacOs version from string with kernel details.
            </summary>
            <param name="kernel"></param>
            <returns></returns>
        </member>
        <member name="T:SignNow.Net.Internal.Infrastructure.RuntimeInfo.MacOsVersions">
            <summary>
            MacOS version based on `Major` octet
            </summary>
        </member>
        <member name="T:SignNow.Net.Internal.Infrastructure.SdkRuntime">
            <summary>
            Represents SignNow SDK general info (name, version...)
            </summary>
        </member>
        <member name="F:SignNow.Net.Internal.Infrastructure.SdkRuntime.ClientName">
            <summary>
            Returns SignNow SDK client name
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Infrastructure.SdkRuntime.Version">
            <summary>
            Returns SignNow SDK version.
            </summary>
        </member>
        <member name="M:SignNow.Net.Internal.Infrastructure.SdkRuntime.FrameworkName">
            <summary>
            Returns framework name for current runtime
            </summary>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Internal.Infrastructure.SdkRuntime.FrameworkVersion">
            <summary>
            Returns framework version for current runtime
            </summary>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Internal.Infrastructure.SdkRuntime.ParseVersion">
            <summary>
            Parse SKD version from Assembly info
            </summary>
            <returns></returns>
        </member>
        <member name="P:SignNow.Net.Internal.Model.ErrorResponseContext.Message">
            <summary>
            Error Message
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.ErrorResponseContext.Code">
            <summary>
            Error Code
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.ErrorResponse.Error">
            <summary>
            Error Message in some response cases
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.ErrorResponse.Error404">
            <summary>
            Error Message for non-valid URL
            </summary>
        </member>
        <member name="T:SignNow.Net.Internal.Model.FieldJsonAttributes">
            <summary>
            Field's attributes.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.FieldJsonAttributes.PageNumber">
            <summary>
            The page number of the document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.FieldJsonAttributes.X">
            <summary>
            X coordinate of the field.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.FieldJsonAttributes.Y">
            <summary>
            Y coordinate of the field.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.FieldJsonAttributes.Width">
            <summary>
            Width of the field.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.FieldJsonAttributes.Height">
            <summary>
            Height of the field.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.FieldJsonAttributes.Required">
            <summary>
            Is field required or not.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.FieldJsonAttributes.PrefilledText">
            <summary>
            Prefilled text value of the field.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.FieldJsonAttributes.Label">
            <summary>
            Field label.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.FieldJsonAttributes.Name">
            <summary>
            Field name.
            </summary>
        </member>
        <member name="T:SignNow.Net.Internal.Model.SignerAuthorization">
            <summary>
            Represents Signer Authorization options for Role-based Invite.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.SignerAuthorization.AuthenticationType">
            <summary>
            Authentication type for case, when password, phone call or sms code used to open the Document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.SignerAuthorization.Password">
            <summary>
            Password will be required from signers when they open the document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.SignerAuthorization.Phone">
            <summary>
            Phone number to authorize signers when they open the document via phone call or sms code.
            </summary>
        </member>
        <member name="T:SignNow.Net.Internal.Model.PasswordAuthorization">
            <summary>
            Represents password authorization for signers when they open the document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.PasswordAuthorization.AuthenticationType">
            <inheritdoc cref="T:SignNow.Net.Internal.Model.SignerAuthorization"/>
        </member>
        <member name="M:SignNow.Net.Internal.Model.PasswordAuthorization.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SignNow.Net.Internal.Model.PasswordAuthorization"/> class.
            </summary>
            <param name="password">Password for signer to open the document.</param>
        </member>
        <member name="T:SignNow.Net.Internal.Model.PhoneCallAuthorization">
            <summary>
            Represents phone call authorization for signers when they open the document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.PhoneCallAuthorization.AuthenticationType">
            <inheritdoc cref="T:SignNow.Net.Internal.Model.SignerAuthorization"/>
        </member>
        <member name="M:SignNow.Net.Internal.Model.PhoneCallAuthorization.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SignNow.Net.Internal.Model.PhoneCallAuthorization"/> class.
            </summary>
            <param name="phone">Phone number.</param>
        </member>
        <member name="T:SignNow.Net.Internal.Model.SmsAuthorization">
            <summary>
            Represents sms code authorization for signers when they open the document.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Model.SmsAuthorization.AuthenticationType">
            <inheritdoc cref="T:SignNow.Net.Internal.Model.SignerAuthorization"/>
        </member>
        <member name="M:SignNow.Net.Internal.Model.SmsAuthorization.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SignNow.Net.Internal.Model.SmsAuthorization"/> class.
            </summary>
            <param name="phone">Phone number.</param>
        </member>
        <member name="P:SignNow.Net.Internal.Requests.CreateDocumentFromTemplateRequest.DocumentName">
            <summary>
            The new document name.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Requests.CreateTemplateFromDocumentRequest.TemplateName">
            <summary>
            The new template name.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Requests.CreateTemplateFromDocumentRequest.DocumentId">
            <summary>
            ID of the document which is the source of a template
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Requests.EmbeddedSigningLinkRequest.AuthMethod">
            <inheritdoc cref="P:SignNow.Net.Model.Requests.CreateEmbedLinkOptions.AuthMethod" />
        </member>
        <member name="P:SignNow.Net.Internal.Requests.EmbeddedSigningLinkRequest.LinkExpiration">
            <inheritdoc cref="P:SignNow.Net.Model.Requests.CreateEmbedLinkOptions.LinkExpiration" />
        </member>
        <member name="M:SignNow.Net.Internal.Requests.EmbeddedSigningLinkRequest.#ctor(SignNow.Net.Model.Requests.CreateEmbedLinkOptions)">
            <summary>
            Embedded Signing Link Request ctor.
            </summary>
            <param name="options">options to create link for embedded signing.</param>
        </member>
        <member name="P:SignNow.Net.Internal.Requests.EmbeddedSigningRequest.Invites">
            <summary>
            Collections of <see cref="T:SignNow.Net.Model.EmbeddedInvite"/> request options.
            </summary>
        </member>
        <member name="M:SignNow.Net.Internal.Requests.EmbeddedSigningRequest.GetHttpContent">
            <summary>
            Creates Json Http Content from object
            </summary>
            <returns>HttpContent</returns>
        </member>
        <member name="T:SignNow.Net.Internal.Requests.FileHttpContent">
            <summary>
            A container for content encoded using <c>multipart/form-data</c> MIME type.
            </summary>
        </member>
        <member name="T:SignNow.Net.Internal.Requests.FormUrlEncodedHttpContent">
            <summary>
            A container for name/value pairs encoded with <c>application/x-www-form-urlencoded</c>
            </summary>
        </member>
        <member name="M:SignNow.Net.Internal.Requests.JsonHttpContent.GetHttpContent">
            <summary>
            Creates Json Http Content from object
            </summary>
            <returns>HttpContent</returns>
        </member>
        <member name="P:SignNow.Net.Internal.Requests.MergeDocumentRequest.Name">
            <summary>
            The name of the document that will be created and written to.
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Requests.MergeDocumentRequest.DocumentIds">
            <summary>
            A list of document unique ids that will be merged.
            </summary>
        </member>
        <member name="M:SignNow.Net.Internal.Requests.MergeDocumentRequest.AddDocuments(System.Collections.Generic.IEnumerable{SignNow.Net.Model.SignNowDocument})">
            <summary>
            Adds documents to be merged
            </summary>
            <param name="docs">Collection of documents</param>
        </member>
        <member name="M:SignNow.Net.Internal.Requests.MergeDocumentRequest.GetHttpContent">
            <summary>
            Creates Json Http Content from object
            </summary>
            <returns>HttpContent</returns>
        </member>
        <member name="P:SignNow.Net.Internal.Service.SignNowClient.SdkUserAgentString">
            <summary>
            client_name>/version (OS_type OS_release; platform; arch) runtime/version
            </summary>
        </member>
        <member name="P:SignNow.Net.Internal.Service.SignNowClient.XUserAgentString">
            <summary>
            Platform dependent raw os/runtime string
            </summary>
        </member>
        <member name="M:SignNow.Net.Internal.Service.SignNowClient.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Initialize a new instance of SignNow Client
            </summary>
            <param name="httpClient">
            If <c>null</c>, an HTTP client will be created with default parameters.
            </param>
        </member>
        <member name="M:SignNow.Net.Internal.Service.SignNowClient.RequestAsync``1(SignNow.Net.Model.RequestOptions,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.ISignNowClient.RequestAsync``1(SignNow.Net.Model.RequestOptions,System.Threading.CancellationToken)" />
        </member>
        <member name="M:SignNow.Net.Internal.Service.SignNowClient.RequestAsync(SignNow.Net.Model.RequestOptions,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.ISignNowClient.RequestAsync``1(SignNow.Net.Model.RequestOptions,System.Threading.CancellationToken)" />
        </member>
        <member name="M:SignNow.Net.Internal.Service.SignNowClient.RequestAsync``1(SignNow.Net.Model.RequestOptions,SignNow.Net.Interfaces.IHttpContentAdapter{``0},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <inheritdoc cref="M:SignNow.Net.Interfaces.ISignNowClient.RequestAsync``1(SignNow.Net.Model.RequestOptions,SignNow.Net.Interfaces.IHttpContentAdapter{``0},System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)" />
        </member>
        <member name="M:SignNow.Net.Internal.Service.SignNowClient.ProcessRequest(SignNow.Net.Model.RequestOptions,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)">
            <summary>
            Make Http request with specified options.
            </summary>
            <param name="requestOptions">request basic params (Url, Method)</param>
            <param name="completionOption"><inheritdoc cref="T:System.Net.Http.HttpCompletionOption"/></param>
            <param name="cancellationToken">Propagates notification that operations should be canceled</param>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Internal.Service.SignNowClient.ProcessErrorResponse(SignNow.Net.Model.RequestOptions,System.Net.Http.HttpResponseMessage)">
            <summary>
            Process Error Response to prepare SignNow Exception
            </summary>
            <param name="requestOptions">request basic params (Url, Method)</param>
            <param name="response"><see cref="T:System.Net.Http.HttpResponseMessage"/></param>
            <exception cref="T:SignNow.Net.Exceptions.SignNowException">SignNow Exception.</exception>
            <returns></returns>
        </member>
        <member name="M:SignNow.Net.Internal.Service.SignNowClient.CreateHttpRequest(SignNow.Net.Model.RequestOptions)">
            <summary>
            Creates Http Request from <see cref="T:SignNow.Net.Model.RequestOptions"/> class.
            </summary>
            <param name="requestOptions"><see cref="T:SignNow.Net.Model.RequestOptions"/></param>
            <exception cref="T:System.ArgumentException">The <paramref name="requestOptions">RequestUrl</paramref> argument is a null.</exception>
            <returns>Request Message <see cref="T:System.Net.Http.HttpRequestMessage"/></returns>
        </member>
    </members>
</doc>
